if __name__ == "__main__":
    from sameUtilsasinfirstimplementation import *
    import time as time
    import numpy as np
else:
    from BetterImplementation.sameUtilsasinfirstimplementation import *

def Schnorr_ENUM(Bm, Mym, B_norms):
    """
    https://mdpi-res.com/d_attachment/mathematics/mathematics-09-01618/article_deploy/mathematics-09-01618-v2.pdf
    
    https://d-nb.info/1169615635/34
    """
    r = Bm.shape[0]
    c_bar = np.zeros(r+1)
    c_bar[0] = B_norms[0]
    u_tilde = np.zeros(r+1)
    u_tilde[0] = 1
    u = np.zeros(r+1)
    u[0] = 1
    y = np.zeros(r+1)
    Delta = np.zeros(r+1)

    delta = np.ones(r+1)

    
    s = t = 0

    # print(c_bar[0])
    c_tilde = np.zeros(r+1)

    """
    I guess I need the following
    """
    v = np.zeros(r+1)

    while t < r:
        c_tilde[t] = c_tilde[t+1] + (y[t] + u_tilde[t]) ** 2 * B_norms[t] 

        if c_tilde[t] < c_bar[0]:
            if t > 0:
                t -= 1
                y[t] = sum(u_tilde[i] * Mym[i][t] for i in range(t + 1, s + 1))
                u_tilde[t] = v[t] = round(-y[t])
                Delta[t] = 0
                if u_tilde[t] > -y[t]:
                    delta[t] = -1
                else:
                    delta[t] = 1
            else:
                c_bar[0] = c_tilde[0]
                for i in range(0, r + 1):
                    u[i] = u_tilde[i]
        else:
            t += 1
            s = max(s, t)
            if t < s:
                Delta[t] = -Delta[t]
            if Delta[t] * delta[t] >= 0:
                Delta[t] += delta[t]
            u_tilde[t] = v[t] + Delta[t]

    return u[:r], u[:r]@Bm, c_bar[0]




if __name__ == "__main__":
#     Bm = np.array([[285,  54,  95, 254,  82, 388,  86, 256, 250, 324, 386, 367,  53, 402,
#   226,  38,  94,  45, 286,  45,   4, 190,  51, 360, 393, 455, 297,  57,
#   470, 124],
#  [358,  10,  45, 380, 274, 312, 160,  19, 119, 270, 222, 128,  49, 308,
#   490, 118, 309, 100, 454, 351, 140, 479, 230, 156,  59,  52, 246, 465,
#   405, 348],
#  [ 15, 414, 214, 250, 434, 310, 251, 154, 375, 474, 209, 338,  62,  91,
#    27, 430, 160, 200,  25, 204,  45, 245, 176, 402, 412, 174,  82, 211,
#   414, 294],
#  [ 38, 242, 411, 329, 367, 287, 247,  60,  15, 345, 338, 169,  62, 228,
#   454, 248, 175, 413, 205, 170, 330, 237,  53, 298, 328, 296, 472, 443,
#   391, 378],
#  [179,  28,  93, 387, 203, 458, 147,  78, 136, 102, 228, 410, 369,  77,
#   268, 145, 448, 222, 236, 110, 235,  51, 126, 425, 428, 307, 287, 234,
#   231, 170],
#  [410, 107, 200, 274, 254, 187,  98, 193, 227, 288, 106, 334, 368, 404,
#   117, 261, 185, 302, 246, 483, 363, 454,  14, 196, 132, 418, 418, 217,
#     1, 210],
#  [223,  50,  85,  87,  65, 197, 345,  65, 377, 303, 118,  19, 310, 405,
#   277, 470,  75, 495, 201, 227, 232, 300, 391,  31, 484, 493, 285, 104,
#    36, 329],
#  [ 28, 478, 454, 458,  36, 165, 127, 163,  79,  70, 381, 494, 407, 251,
#   401, 274,  22, 398, 116, 417,  18, 312,  64, 369, 359, 133,  77,  51,
#   243,  49],
#  [122,  14, 294,  74, 422, 231, 293, 466, 299,  35,  58,  44, 467, 206,
#   357, 176,  31, 106,  90, 114, 321,  15,  58, 443, 392, 186, 454, 158,
#   120, 423],
#  [271, 275, 285, 446, 334, 150, 142, 283, 249, 329,  23, 312,  94, 366,
#   499, 209,  79, 166, 216,  13, 344, 134, 438, 171, 457, 355, 416, 256,
#   168, 469],
#  [ 37, 263,  35, 297, 262, 322,  17, 269, 406, 252, 485, 269, 460,  27,
#    18, 185, 319, 371, 182,  79, 124,  93, 353, 310, 325, 204, 272, 437,
#   314,  45],
#  [396,  13, 355, 146, 452, 289,  29, 475, 326, 274, 308,  95, 290, 109,
#   204, 414, 182, 379, 188, 290,  99, 229, 152, 422, 445, 448, 299,  48,
#   124,  45],
#  [387, 444, 417, 489, 434, 315, 382, 333,  83, 134, 396, 261, 113, 295,
#    55, 246, 217, 477,  39, 303, 435, 221, 278, 406, 453, 439, 218,   9,
#   377, 454],
#  [455, 495, 133, 179, 163, 196,  44, 311, 496, 252, 465, 389, 302, 451,
#   286, 341, 189, 386,  64, 291, 434,  31, 430, 187, 282, 365, 377, 226,
#   375, 190],
#  [282, 456, 491,  12, 170, 302,  47, 296, 103, 270, 355, 104, 190,  57,
#   337, 191,  26,  58, 164, 451,  49, 132, 417,  19, 457, 376, 406, 233,
#   261, 346],
#  [131, 302, 482,  66,  51, 463,  28, 147, 197, 449,  69, 493, 309,  59,
#   468, 488, 362, 387,  12,  47, 230, 317, 364,   5,  40, 475, 407, 361,
#    77, 382],
#  [ 90, 256, 220, 134, 337, 320, 354, 329, 153, 109, 364, 384,  91, 202,
#   465,   8, 498, 152, 179, 166,   5, 245, 126, 489, 306, 233, 332, 424,
#    74, 437],
#  [338, 284, 199, 496, 127, 360, 430, 158,  70, 389, 332, 326, 157, 452,
#   150, 343, 472, 273, 181, 298,  94, 422, 162, 165,  57, 122, 291, 316,
#   318, 205],
#  [398, 300, 165,  71, 290, 144, 499, 201,  30, 135, 251, 313, 310, 117,
#   118, 460,   7, 367, 101, 321, 178, 100, 405, 116, 492, 429, 327, 388,
#   169, 334],
#  [377, 499,  46, 362, 250, 193, 172, 262, 309, 442, 491, 463,  97, 146,
#   303, 236,  37, 332, 486, 268, 496,  55, 453, 272, 341,  60, 418,  73,
#   465, 368]])
#     Bm = np.array([[-82, -42, -178, -211, 52, 22, -32, 78, -9, -51, -63, 279, 200, 280],
# [145, 0, -84, 53, 211, -203, 195, -35, 15, 92, 38, -56, 172, -150],
# [120, 76, 66, 249, 152, -220, -65, 124, 53, 161, -120, 209, -131, -39]])
    # Bm = np.array([[1,0,3,53],[5,1,17,12],[6,2,20,32]])
    # Bm = np.random.randint(376, size=(11,11))
    Bm = np.array([[1,0,3,6],[5,1,7,12],[6,2,9,10]])
    # print(np.array([1,0,3,6])@np.array([1,0,3,6]))
    print(Bm)
    B_gs,Mym = gram_schmidt(Bm)
    B_norms = calc_norm(B_gs)
    start = time.time()
    u, shortest_vector, c_bar = Schnorr_ENUM(Bm ,Mym, B_norms)
    print("Time taken: ", time.time() - start)

    
    print("Schnorr shortest vector: ", shortest_vector, "\na:", u, "\ncbar:", c_bar)
    print("maybe something", np.linalg.norm(shortest_vector)**2)