import numpy as np
from betterUtils import *
import time

def ENUM(Bm,B_gs,Mym, B_norms):
    """
    https://mdpi-res.com/d_attachment/mathematics/mathematics-09-01618/article_deploy/mathematics-09-01618-v2.pdf
    
    https://d-nb.info/1169615635/34
    """
    r = Bm.shape[0]
    c_bar = np.zeros(r+1)
    c_bar[0] = B_norms[0]
    u_tilde = np.zeros(r+1)
    u_tilde[0] = 1
    u = np.zeros(r+1)
    u[0] = 1
    y = np.zeros(r+1)
    Delta = np.zeros(r+1)

    delta = np.ones(r+1)

    
    s = t = 0

    
    c_tilde = np.zeros(r+1)

    """
    I guess I need the following
    """
    v = np.zeros(r+1)

    while t < r:
        c_tilde[t] = c_tilde[t+1] + (y[t] + u_tilde[t]) ** 2 * B_norms[t] 

        if c_tilde[t] < c_bar[0]:
            if t > 0:
                t -= 1
                y[t] = sum(u_tilde[i] * Mym[i][t] for i in range(t + 1, s + 1))
                u_tilde[t] = v[t] = round(-y[t])
                Delta[t] = 0
                if u_tilde[t] > -y[t]:
                    delta[t] = -1
                else:
                    delta[t] = 1
            else:
                c_bar[0] = c_tilde[0]
                for i in range(0, r + 1):
                    u[i] = u_tilde[i]
        else:
            t += 1
            s = max(s, t)
            if t < s:
                Delta[t] = -Delta[t]
            if Delta[t] * delta[t] >= 0:
                Delta[t] += delta[t]
            u_tilde[t] = v[t] + Delta[t]

    return u[:r], u[:r]@Bm 




if __name__ == "__main__":
    Bm = np.array([[394, 301, 314,  11,  18, 445, 268, 151,  15, 100, 459,  64, 420,  22,
  397, 438, 303, 193, 324, 329],
 [ 80, 161,  31, 280, 311, 119, 343, 217, 169, 238, 406, 144, 499, 206,
  410, 434, 483,  28, 411, 484],
 [201, 462, 119, 497, 110, 309,  28, 220, 446, 206,  60,  80,  59, 188,
   12, 494, 311, 191, 469, 461],
 [ 97, 475, 252, 335, 209, 351,  25, 256, 323, 241, 253, 470,  65, 150,
   23,  29,  38, 157, 125, 230],
 [ 29,  18,  20,  65, 279, 488, 485, 447, 336, 277, 453,   2, 472, 214,
  442, 334, 177, 315, 329, 326],
 [339, 281, 163, 333, 211, 233,  18, 213, 164, 277, 207,  12, 168, 456,
  386, 348, 152, 378, 122,   5],
 [307, 423, 237, 199, 488, 499, 495, 452, 390, 173,  11, 406, 157, 460,
  414, 327, 439, 367, 476, 139],
 [ 98, 456, 331, 287, 203, 112,  46, 177, 120,  18, 158, 246,  78, 425,
  302, 148,  40, 337, 161,  35],
 [254, 323, 430, 478, 207, 223, 419, 184,  54, 306, 256, 281, 490, 488,
  307,   9, 267, 337, 236,  31],
 [267,  70, 417, 334,  30, 230, 386, 128, 151,  40, 424, 106, 388,  11,
  283, 229,   2, 455, 464, 125],
 [461, 472, 240,  92, 452,   2, 111, 472, 385,   6, 173, 357, 291, 425,
  474, 382, 352, 198, 110, 213],
 [ 22, 178, 149, 358,  80, 265,  10, 470, 385,  14, 204,  74,  44, 329,
  481, 302, 319, 262, 109, 126],
 [375, 317, 355,  68, 369, 279,  45, 448,  66, 157, 138, 498, 200,  40,
  419, 481, 379,  19, 307, 223],
 [225, 430, 143, 230, 414,  36, 432, 410, 310,  74, 237, 249, 253, 177,
  287, 385, 375, 270, 365, 206],
 [ 38, 359, 147, 257, 231, 280, 486, 158, 408, 220, 138,  22,  56, 491,
  432, 445, 209, 382, 493, 379],
 [ 83,   3, 322, 322, 112, 327, 195, 290,  20,  44, 175, 441, 195, 240,
  244, 409, 489, 334, 459,  38],
 [259, 338,  56,  31, 248,  60,  39, 353,  35, 367, 469, 166, 283,  77,
   81, 285,  87, 182,  87, 423],
 [192, 415, 166, 496, 198, 177, 187, 118, 416, 234, 464, 368, 433, 111,
  377,  38, 391, 265,  71, 280],
 [ 38,  84, 104, 275, 314, 140,  54, 197, 307, 122, 272, 311,  59, 454,
   22, 154, 282, 450, 437, 470],
 [484, 401, 203,  17, 265, 150, 197, 239, 241,  37, 439, 160, 415, 169,
  327,  76, 332, 293, 399, 195]])
    print(Bm)
    B_gs,Mym = gram_schmidt(Bm)
    B_norms = calc_norm(B_gs)
    start = time.time()
    u, shortest_vector = ENUM(Bm,B_gs,Mym, B_norms)
    print("Time taken: ", time.time() - start)

    # print("Best a:", u, "\nShortest vector: ", shortest_vector)