import numpy as np
 
# a = np.array([[  25,-241,-115, -81,  55, -67, 112,-174, 101, -59,-110,  37,  47,  17],
#  [ 115, 134,  91, 204,  55, 172,  26,  12, -87, -35, -54,  87, 181,  51],
#  [-109, -52, 122, 229, -17, 147, 216,   2,   4,  97,  56,  -7,  36,  17],
#  [-110, -39,-140,  -7, 212,  84,-125,  25,-142, -87,  63, -44,  55,  63],
#  [ -45,  20,-102,  15, 156,  78, 115,  54, 135,-167,-196,  14,   2, 256],
#  [  -2,  10,  62,  -9, -43,  29,  14,  43,  53, 180,-344,  41, -38, 144],
#  [  -3,  39,  83, -81, -87,-161, 190,  58,-143,  -7,-111,-101,-277,  20],
#  [ 147, 103, -85,  13,  54, 219,  69, -51, 197, 136, -13, 132, -36, -84],
#  [-204,  58,  19,  70, 111,  57,  -6,-248,  80, 173,  23,  87,  20,-130],
#  [-254, -18, 105, -87, 174, -12, 111, 193, -52, 108,  16,  90,-138, -92],
#  [  40, -20, 150,-185, -98,-145, 110,-172,  27, 105, -74, -74, -50, 318],
#  [ -82, -42,-178,-211,  52,  22, -32,  78,  -9, -51, -63, 279, 200, 280],
#  [ 145,   0, -84,  53, 211,-203, 195, -35,  15,  92,  38, -56, 172,-150],
#  [ 120,  76,  66, 249, 152,-220, -65, 124,  53, 161,-120, 209,-131, -39]])

a = np.array([[-110, -39, -140, -7, 212, 84, -125, 25, -142, -87, 63, -44, 55, 63],
[25, -241, -115, -81, 55, -67, 112, -174, 101, -59, -110, 37, 47, 17],
[115, 134, 91, 204, 55, 172, 26, 12, -87, -35, -54, 87, 181, 51],
[-109, -52, 122, 229, -17, 147, 216, 2, 4, 97, 56, -7, 36, 17],
[-30, 168, 74, -112, 246, 13, -79, 203, -143, -24, -94, 184, 7, -58],
[-3, 39, 83, -81, -87, -161, 190, 58, -143, -7, -111, -101, -277, 20],
[147, 103, -85, 13, 54, 219, 69, -51, 197, 136, -13, 132, -36, -84],
[17, 283, 71, -36, 96, -79, -6, -180, -154, 34, -198, 80, -112, -76],
[45, -20, 102, -15, -156, -78, -115, -54, -135, 167, 196, -14, -2, -256],
[-67, -49, 24, -31, 13, 35, -226, 14, -224, 260, -85, -17, 15, -49],
[-40, 20, -150, 185, 98, 145, -110, 172, -27, -105, 74, 74, 50, -318],
[28, -3, -38, -204, -160, -62, 93, 53, 133, 36, -126, 323, 145, 217],
[145, 0, -84, 53, 211, -203, 195, -35, 15, 92, 38, -56, 172, -150],
[-40, 131, 148, -354, -118, 149, 111, 54, -54, -98, -37, 19, 83, -82]]
)

# a = np.array([[ 11, 15,-11, 10,  6,-16,  6,-14, 46,  4],
#  [-13, 17, 11, -3,-12,  7,  1,-47,-24,  8],
#  [-38, 20, 18,-18, 21,-21, 23, 13, 10, -4],
#  [ 14, -1, 36,-16, 34,-37, 14, -1,-23, -2],
#  [  4,  3, 15,-24,-16,-35, 28, -8, -3, 43],
#  [  7, 22,  7,  5, 41,-14,  2,  2,-14, 52],
#  [-11,-32,-10, 13, -8, 35, 41,-24, -8,-27],
#  [  7,-43, 26, 44,  6, -5, -1,-45, 13,  1],
#  [-12, 19, 60, 11, 11, 24, 29,-18, 11, -5],
#  [  1,-11,-15, 45,-47, -1, 24, 30, -8,-22]])


def gram_schmidt(Bm):
    """
    Computes my own QR thing. 

    Gives so Mym@B_gs is Bm.
    ------------------------------------
    Mym: (r,r)
    B_gs: (r,k)
    """
    # Bm = Bm[~np.all(Bm == 0, axis=1)]  #Removing all zero rows
    r,k = Bm.shape
    B_gs = np.zeros((r,k))
    Mym = np.zeros((r,r))
    B_gs[0] = Bm[0]
    
    # The following is just the gram schmidt algorithm
    for i in range(1,r):
        v =  Bm[i]
        for j in range(i):
            # print("Inside gram schmidt")
            # print(B_gs[j])
            if np.linalg.norm(B_gs[j]) < 0.000001:  #Cause if 0, then we get div by 0, so we just set my = 0
                my = 0
            else:
                my = np.dot(Bm[i,:],B_gs[j])/np.dot(B_gs[j],B_gs[j])
            Mym[i,j] = my
            v = v - my * B_gs[j]
        B_gs[i] = v
    return B_gs,Mym + np.diag([1]*r)  #Add the diag of 1

def pi_projection(x,b):
    """
    '''Computes the projection of x on b as a vector'''
    """
    return np.dot(x, b)/np.dot(b, b) * b

def PI(x,BGSblock):
    """
    Ï€_i(x)

    I think it works fine
    """
    pi = 0
    for row in BGSblock:
        pi += pi_projection(x,row)
    return pi

B_gs, Mym = gram_schmidt(a)

for i in range(len(a)):
    print("PI:", round(np.linalg.norm(PI(a[i],B_gs[i:]))**2))
for i in range(len(a)):
    print("Norm", round(np.linalg.norm(a[i])**2))